name: tests

on:
  push:
    branches: [master, main]
    paths-ignore: ['**.md']
    tags-ignore: ['**']
  pull_request:
    paths-ignore: ['**.md']

jobs:
  gitleaks:
    name: Gitleaks
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with: {fetch-depth: 0}

      - name: Check for GitLeaks
        uses: zricethezav/gitleaks-action@v1.6.0 # Action page: <https://github.com/zricethezav/gitleaks-action>

  golangci-lint:
    name: Golang-CI (lint)
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v2
        with: {go-version: 1.17}

      - name: Run linter
        uses: golangci/golangci-lint-action@v3 # Action page: <https://github.com/golangci/golangci-lint-action>
        with:
          version: v1.38 # without patch version
          only-new-issues: false # show only new issues if it's a pull request

  goreportcard:
    name: Update state on goreportcard.com
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/master' # only for `master` branch
    steps:
      - name: Send update request
        continue-on-error: true
        run: curl -X POST -F "repo=github.com/$GITHUB_REPOSITORY" https://goreportcard.com/checks

  go-test:
    name: Unit tests
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with: {go-version: 1.18}

      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2 # Fixes codecov error 'Issue detecting commit SHA'

      - name: Go modules Cache # Docs: <https://git.io/JfAKn#go---modules>
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Install Go dependencies
        run: go mod download

      - name: Run Unit tests
        run: go test -race -covermode=atomic -coverprofile /tmp/coverage.txt ./...

      - name: Upload Coverage report to CodeCov
        continue-on-error: true
        uses: codecov/codecov-action@v2 # https://github.com/codecov/codecov-action
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: /tmp/coverage.txt
          fail_ci_if_error: false

  build:
    name: Build for ${{ matrix.os }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        os: [linux, windows, darwin] # linux, freebsd, darwin, windows
        arch: [amd64]                # amd64, 386
        include:
          - os: linux
            arch: 386
    needs: [golangci-lint, go-test]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v2
        with: {go-version: 1.18}

      - name: Check out code
        uses: actions/checkout@v3

      - uses: gacts/github-slug@v1
        id: slug

      - name: Go modules Cache # Docs: <https://git.io/JfAKn#go---modules>
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Install Go dependencies
        run: go mod download

      - name: Build application
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
          LDFLAGS: -s -w -X github.com/tarampampam/tinifier/v3/internal/pkg/version.version=${{ steps.slug.outputs.branch-name-slug }}@${{ steps.slug.outputs.commit-hash-short }}
        run: go build -trimpath -ldflags "$LDFLAGS" -o /tmp/tinifier ./cmd/tinifier/main.go

      - name: Try to execute
        if: matrix.os == 'linux'
        run: /tmp/tinifier version && /tmp/tinifier -h

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: tinifier-${{ matrix.os }}-${{ matrix.arch }}
          path: /tmp/tinifier
          if-no-files-found: error
          retention-days: 1

  image:
    name: Build docker image
    runs-on: ubuntu-20.04
    needs: [golangci-lint, go-test]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - uses: gacts/github-slug@v1
        id: slug

      - name: Build image
        run: docker build -t tinifier:local --build-arg "APP_VERSION=${{ steps.slug.outputs.branch-name-slug }}@${{ steps.slug.outputs.commit-hash-short }}" -f ./Dockerfile .

      - name: Try to execute
        run: docker run --rm tinifier:local version

      - name: Scan image
        uses: anchore/scan-action@v3 # action page: <https://github.com/anchore/scan-action>
        with:
          image: tinifier:local
          fail-build: true
          severity-cutoff: low # negligible, low, medium, high or critical
